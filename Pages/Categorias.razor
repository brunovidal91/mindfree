@page "/categorias"
@using MindFree.Services
@inject ICookie cookie
@inject HttpClient httpClient
@inject NavigationManager NavigationManager



@* <h5>Cadastro de Categorias</h5> *@
<SectionContent SectionName="Top">
	<p class="text-center mt-3">Gestão de Categorias</p>
</SectionContent>
<section class="d-flex flex-column gap-5">

	@if (!string.IsNullOrEmpty(_msg))
	{
		<p class="alert alert-@status">@_msg</p>
	}


	<EditForm Model="category" OnValidSubmit="AddCategory" OnInvalidSubmit="ErrorAddCategory" FormName="FormCategory">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="section_input_category">

			<div class="d-flex align-items-start flex-column">
				<label for="input_name">Nome</label>
				<InputText id="input_name" @bind-Value="Title" class="form-control" @ref="input_name" />



			</div>

			<div class="d-flex align-items-centerflex-row  gap-3 mt-3">

				<div class="d-flex align-items-center flex-column">
					<label for="input_isIncome">É receita?</label>
					<InputCheckbox id="input_isIncome" @bind-Value="_isIncome" style="width: 20px; height: 20px; accent-color: var(--verdePrincipal)" />



				</div>
				<div class="d-flex align-items-center flex-column">
					<label for="_isMonthly">É recorrente?</label>
					<InputCheckbox id="_isMonthly" @bind-Value="_isMonthly" style="width: 20px; height: 20px; accent-color: var(--verdePrincipal)" />

				</div>

			</div>

			<div class="d-flex align-items-start flex-column mt-2">
				<label for="input_amount">Dia Vcto. </label>
				@* <SelectDay @bind-value="_day" disabled="@IsMonthlyType()" /> *@
				<select @bind="_day" class="form-select" id="input_repeatPer" style="width: 80px;" disabled="@IsMonthlyType()">

					@for (int i = 1; i <= 31; i++)
					{
						<option selected>@i</option>
					}

				</select>


			</div>

			<div class="d-flex align-items-start flex-column mt-2">
				<label for="input_amount">Valor R$</label>
				@* <InputAmount disabled=@IsMonthlyType() Amount="@_amount"/> *@
				<input type="text" class="form-control" id="input-amount" @bind-value="@_amount" disabled="@IsMonthlyType()" />


			</div>

			<div class="d-flex flex-row gap-2">

				<button type="submit" class="btn btn-success mt-3">Salvar</button>
				<button type="button" class="btn btn-warning mt-3" @onclick="CleanFields">Limpar</button>
				<button type="button" class="btn btn-danger mt-3" @onclick="Delete">Deletar</button>
			</div>
		</div>


	</EditForm>

	<div class="tables_div row-cols-2">
		<!-- Table de categorias de saída -->
		<div class="d-flex flex-column align-items-center">
			<p class="mb-0">Categorias de Saída</p>

			@if (categories.Count == 0)
			{
				if (_isListEmpty == false)
				{

					<p id="load-categories" class="rotacionar"></p>
				}
				else
				{
					<p class="text-center" style="color: var(--amareloLoad); margin-top: 100px;">Ainda não há nenhum item cadastrado :(</p>
				}
			}
			else
			{

				<table class="table table-hover border">
					<thead>
						<tr class="text-center" style="background-color: var(--roxoCard); color: #fff;">
							<th colspan="2">Nome</th>
							<th>É Fixa?</th>
							<th>Dia de venc.</th>
							<th style="text-align: left">Valor</th>
						</tr>
					</thead>
					<tbody>

						@foreach (Category category in categories)
						{
							if (category.isIncome == false)
							{
								<tr class="text-center" @ondblclick="@(() => GetInfo(category))" style="cursor: pointer;">
									<td colspan="2">@category.title</td>
									<td>@(category.isMonthly ? "Sim" : "Não")</td>
									<td>@(category.isMonthly ? category.day : "")</td>
									<td style="text-align: left">R$ @category.amount.ToString("F2")</td>
								</tr>
							}
						}

					</tbody>
				</table>
			}

		</div>

		<!-- Table de categorias de entrada -->
		<div class="d-flex flex-column align-items-center">
			<p class="mb-0">Categorias de Entrada</p>

			@if (categories.Count == 0)
			{
				if (_isListEmpty == false)
				{

					<p id="load-categories" class="rotacionar"></p>
				}
				else
				{
					<p class="text-center" style="color: var(--amareloLoad); margin-top: 100px;">Ainda não há nenhum item cadastrado :(</p>
				}


			}
			else
			{

				<table class="table table-hover border">
					<thead>
						<tr class="text-center" style="background-color: #231058; color: #fff;">
							<th colspan="2">Nome</th>
							<th>É Fixa?</th>
							<th>Dia de venc.</th>
							<th style="text-align: left">Valor</th>
						</tr>
					</thead>
					<tbody>



						@foreach (Category category in categories)
						{
							if (category.isIncome)
							{
								<tr class="text-center" @ondblclick="@(() => GetInfo(category))" style="cursor: pointer;">
									<td colspan="2">@category.title</td>
									<td>@(category.isMonthly ? "Sim" : "Não")</td>
									<td>@(category.isMonthly ? category.day : "")</td>
									<td style="text-align: left">R$ @category.amount.ToString("F2")</td>
								</tr>
							}
						}
					</tbody>
				</table>
			}

		</div>

	</div>
</section>




@code {
	Category category = new();
	private string? _id { get; set; }
	public string? Title { get; set; }
	private bool _isIncome { get; set; }
	private string? _day { get; set; }
	private bool _isMonthly { get; set; }
	public double _amount { get; set; }

	private bool _isListEmpty { get; set; }

	public InputText input_name { get; set; } = null!;

	private string? _msg { get; set; }
	private string? status { get; set; }

	private List<Category> categories = new();



	protected override async Task OnInitializedAsync()
	{
		await SelectCategories();
	}

	private async Task AddCategory()
	{

		CategoryService categoryService = new(httpClient, cookie);
		Category category = new Category { title = Title, amount = _amount, day = _day, isIncome = _isIncome, isMonthly = _isMonthly };

		if (!string.IsNullOrEmpty(Title))
		{
			try
			{
				Category? verifyCategoryTitle = categories.Where(category => category.title.Trim().ToUpper() == Title.Trim().ToUpper()).FirstOrDefault();

				if (verifyCategoryTitle is null)
				{

					await categoryService.CreateCategory(category);

					await SelectCategories();
					await CleanFields();
					_msg = "Categoria inserida com sucesso!";
					status = "success";
				}
				else
				{
					_msg = "Categoria já existente";
					status = "danger";
				}

			}
			catch (Exception ex)
			{
				_msg = ex.Message;
				status = "info";
			}
		}
		else
		{
			_msg = "A categoria precisa ter pelo menos o nome";
			status = "danger";
		}
	}

	private async Task SelectCategories()
	{
		UserService userService = new(httpClient, cookie, NavigationManager);
		CategoryService categoryService = new(httpClient, cookie);
		try
		{

			categories = await categoryService.GetCategories();

			if(categories.Count == 0)
			{
				_isListEmpty = true;
			}
			else
			{
				_isListEmpty = false;
			}
		}
		catch (Exception ex)
		{
			_msg = ex.Message;
			status = "danger";

			if (ex.ToString().Contains("Unauthorized"))
			{
				await userService.Logout();
			}
		}
	}

	private async Task Delete()
	{
		CategoryService categoryService = new(httpClient, cookie);

		try
		{
			await categoryService.DeleteCategory(_id);
			await SelectCategories();
			await CleanFields();
			_msg = "Categoria excluída com sucesso!";
			status = "success";

		}
		catch (Exception ex)
		{
			_msg = ex.Message;
			status = "danger";
		}
	}


	private void ErrorAddCategory()
	{
		_msg = "Erro ao inserir";
		status = "danger";
	}

	private bool IsMonthlyType()
	{
		if (!_isMonthly)
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	private async Task CleanFields()
	{
		_id = "";
		Title = "";
		_isIncome = false;
		_isMonthly = false;
		_amount = 0;
		_day = "";

		// await Utils.SetFocus(input_name);

	}

	private async Task TesteCookie()
	{
		await cookie.SetValue("testekey", "Esse foi o teste do value", 2);
		_msg = await cookie.GetValue("testekey");
	}


	private void GetInfo(Category cat)
	{
		_id = cat.id;
		Title = cat.title;
		_isIncome = cat.isIncome;
		_isMonthly = cat.isMonthly;
		_amount = cat.amount;
		_day = cat.day;
	}

}


<script>
	$(document).ready(() => {
		$('#input-amount').mask('#.##0,00', {reverse: true});
	})
</script>