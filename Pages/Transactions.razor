@page "/lancamentos"
@using MindFree.Services
@inject HttpClient HttpClient
@inject ICookie Cookie
@inject IMonthList MonthList

<SectionContent SectionName="Top">
	<p class="text-center mt-3">Lançamentos - @_mesReferencia - @_currentGlobalYear</p>
</SectionContent>

<div class="d-flex align-items-center gap-3" style="float: right;" id="input-month">
	<label>Mês atual</label>
	<select class="form-select" @onchange="UpdateSelectedMonth" style="width: 150px;">
		@foreach (Month month in MonthList.Months().Take(12))
		{
			<option value=@month.MonthPosition selected="@(month.MonthPosition == DateTime.Now.Month)">@month.MonthName</option>
		}

	</select>
</div>

<div class="d-flex align-items-center justify-content-center gap-3" id="container-input">
	<div class="d-flex flex-column">
		<label>Categoria</label>
		<select class="form-select" @onchange="LoadCategoryData" style="width: 150px;">
			<option value="0" disabled selected>Selecione</option>
			@foreach (Category category in categories.OrderBy(item => item.title))
			{
				<option value="@category.id">@category.title</option>
			}

		</select>
	</div>
	<div class="d-flex align-items-start flex-column">
		<label for="input_amount">Dia</label>

		<select @bind="_day" class="form-select" id="input_repeatPer" style="width: 80px;">

			@for (int i = 1; i <= 31; i++)
			{
				<option selected="@(i == DateTime.Now.Day)">@i</option>
			}

		</select>


	</div>

	<div class="btn-container">
		<div class="d-flex align-items-start flex-column">
			<label for="input_amount">Valor R$</label>
			<input type="text" class="form-control" id="input-amount-transaction" @bind-value="@_value" />
		</div>
		<button @onclick="InsertTransaction" class="mt-4" style="border: none; background-color: transparent; height: 50px; display: flex; align-items: center; justify-content: center; padding: 0px;">
			<img src="icon-add.png" width="50" class="btn-include" />
		</button>
		@* <button class="mt-4" style="border: none; background-color: transparent; height: 50px; display: flex; align-items: center; justify-content: center; padding: 0px;"> *@
		@* 	<img src="icon-remove.png" width="50" class="btn-exclude" /> *@
		@* </button> *@
	</div>
</div>

@if (!string.IsNullOrEmpty(_msg))
{

	<p class="alert alert-danger">@_msg</p>
}

<div class="transaction-card-container">


	<Card Day="Entradas Fixas" Transactions="monthlyTransactionsIncome" TitleColor="var(--verdePrincipalEscuro)" EventTransaction="GetTransData" />
	<Card Day="Saídas Fixas" Transactions="monthlyTransactionsNotIncome" TitleColor="var(--vermelhoPrincipal)" EventTransaction="GetTransData" />

	@for (int i = 1; i <= 31; i++)
	{
		List<Transaction> _transactions = BuildList(i);

		if (_transactions.Count > 0)
		{
			<Card Day="@i.ToString()" Transactions="@(_transactions)" TitleColor="var(--roxoCard)" EventTransaction="GetTransData" />
		}
	}

</div>

<div class="clean-delete-card @animationRef" @onclick="CleanDeleteCard">
	<img src="icon-arrow-right.png" width="30" class="trash" />
</div>

<div class="delete-card @animationRef" @onclick="DeleteCard">
	<img src="Trash.png" width="30" class="trash"/>
</div>

@code {

	private List<Transaction> transactions = new();
	private List<Transaction> monthlyTransactions = new();
	private List<Transaction> monthlyTransactionsIncome = new();
	private List<Transaction> monthlyTransactionsNotIncome = new();
	private string _mesReferencia { get; set; } = string.Empty;
	private int monthIndex { get; set; }
	public List<Category> categories { get; set; } = new();
	public CategoryService? categoryService { get; set; }
	public Category selectedCategory { get; set; } = new();

	private int _day { get; set; }
	private double _value { get; set; }

	public TransactionService? transactionService;
	public Transaction transaction = new();

	private string _msg { get; set; } = string.Empty;
	private string _currentGlobalYear { get; set; } = string.Empty;

	private bool _isSelected { get; set; }

	private string animationRef { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		string _currentYearCookie = await Cookie.GetValue("config");
		_currentGlobalYear = _currentYearCookie.Split(",")[0].Trim();

		await GetTransactionList();
		monthIndex = DateTime.Now.Month;
		_day = DateTime.Now.Day;
		_mesReferencia = MonthList.SelectedMonth(monthIndex).MonthName!;

		string _token = await Cookie.GetValue("app_token");

		if (!string.IsNullOrEmpty(_token))
		{
			categoryService = new(HttpClient, Cookie);
			categories = await categoryService.GetCategories();
		}

		monthlyTransactionsIncome = BuildMonthlyList().Where(item => item?.Category?.isIncome == true).Where(item => item.Month == monthIndex.ToString()).ToList() ?? new List<Transaction>();
		monthlyTransactionsNotIncome = BuildMonthlyList().Where(item => item?.Category?.isIncome == false).Where(item => item.Month == monthIndex.ToString()).ToList() ?? new List<Transaction>();
	}

	private async Task UpdateSelectedMonth(ChangeEventArgs e)
	{
		monthIndex = int.Parse(e.Value.ToString());
		_mesReferencia = MonthList.SelectedMonth(monthIndex).MonthName!;

		monthlyTransactionsIncome = BuildMonthlyList().Where(item => item?.Category?.isIncome == true).Where(item => item.Month == monthIndex.ToString()).ToList() ?? new List<Transaction>();
		monthlyTransactionsNotIncome = BuildMonthlyList().Where(item => item?.Category?.isIncome == false).Where(item => item.Month == monthIndex.ToString()).ToList() ?? new List<Transaction>();
		await GetTransactionList();
	}

	private void UpdateAllLists()
	{
		monthlyTransactionsIncome = BuildMonthlyList().Where(item => item?.Category?.isIncome == true).Where(item => item.Month == monthIndex.ToString()).ToList() ?? new List<Transaction>();
		monthlyTransactionsNotIncome = BuildMonthlyList().Where(item => item?.Category?.isIncome == false).Where(item => item.Month == monthIndex.ToString()).ToList() ?? new List<Transaction>();
	}

	private List<Transaction> BuildList(int day)
	{
		List<Transaction> transactionsPerDay = transactions.Where(transaction => transaction.Date == day.ToString()).Where(transaction => transaction?.Category?.isMonthly == false)
		.Where(transaction => transaction.Month == monthIndex.ToString()).ToList();

		return transactionsPerDay;
	}

	private List<Transaction> BuildMonthlyList()
	{
		monthlyTransactions = transactions.Where(item => item?.Category?.isMonthly == true).ToList() ?? new List<Transaction>();

		return monthlyTransactions;
	}

	private async Task GetTransactionList()
	{
		transactionService = new(HttpClient, Cookie);
		string _currentYearCookie = await Cookie.GetValue("config");
		string _currentYear = _currentYearCookie.Split(",")[0].Trim();

		try
		{
			transactions = await transactionService.GetTransactions(DateTime.Now.Day.ToString(), "Y", DateTime.Now.Month.ToString(), _currentYear);
			BuildMonthlyList();
			UpdateAllLists();

		}
		catch (Exception ex)
		{
			_msg = ex.Message;
		}
	}

	private async Task InsertTransaction()
	{
		transactionService = new(HttpClient, Cookie);
		string _currentYearCookie = await Cookie.GetValue("config");
		string _currentYear = _currentYearCookie.Split(",")[0].Trim();

		transaction.Year = _currentYear;
		transaction.Value = _value;
		transaction.Category.id = selectedCategory.id;
		transaction.Date = _day.ToString();
		transaction.Month = monthIndex.ToString();

		try
		{
			await transactionService.InsertTransaction(transaction);
			await GetTransactionList();
			CleanFields();
		}
		catch (Exception ex)
		{
			_msg = ex.Message;
		}
	}

	private void CleanFields()
	{
		_day = DateTime.Now.Day;
		_value = 0;
		_msg = "";
		_isSelected = false;
		animationRef = "leaveCardAnimation";
	}

	private async Task LoadCategoryData(ChangeEventArgs e)
	{
		Category verifyCategory = new();
		List<Category> verifyCategories = new();
		categoryService = new(HttpClient, Cookie);
		verifyCategories = await categoryService.GetCategories();

		selectedCategory.id = e.Value.ToString();
		verifyCategory = verifyCategories.Where(item => item.id == selectedCategory.id).FirstOrDefault<Category>()!;

		if (verifyCategory.amount > 0)
		{
			_value = verifyCategory.amount;
		} else { _value = 0; }
		if (!string.IsNullOrEmpty(verifyCategory.day))
		{
			_day = int.Parse(verifyCategory.day);
		}
		else
		{
			_day = DateTime.Now.Day;
		}
	}

	private async Task GetTransData(Transaction trans)
	{
		_isSelected = true;
		// _value = trans.Value;
		// _day = int.Parse(trans.Date);

		// selectedCategory.id = trans.Category.id;

		transaction = trans;

		animationRef = "riseCardAnimation";


		// Delay para recolher os botões laterais

		// if (_isSelected)
		// {
		// 	int delay = 5000;

		// 	await Task.Delay(delay).ContinueWith((task) =>
		// 	{
		// 		CleanDeleteCard();
		// 	});
		// }
	}

	private async Task DeleteCard()
	{
		transactionService = new(HttpClient, Cookie);
		try
		{
			await transactionService.DeleteTransaction(transaction);
		}
		catch (Exception ex)
		{
			_msg = ex.Message;
		}

		CleanDeleteCard();
		CleanFields();
		await GetTransactionList();
	}

	private void CleanDeleteCard()
	{
		_isSelected = false;
		animationRef = "leaveCardAnimation";
		transaction = new();

	}
}

<script>
	$(document).ready(() => {
		$("#input-amount-transaction").mask("##.#00,00", {reverse: true});
	});
</script>