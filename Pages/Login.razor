@page "/login"
@layout LoginLayout
@using MindFree.Services
@inject HttpClient httpClient
@inject IJSRuntime jSRuntime
@inject ICookie cookie
@inject NavigationManager NavigationManager

<div class="login-container">
	<div class="container_logo">
		<img src="mindfree.png" alt="logo" style="width: 250px; height: 250px;"/>
	</div>
	<div class="container_input">


		<EditForm Model="user" OnSubmit="Sigin">
			<DataAnnotationsValidator/>
			<ValidationSummary/>

			<InputText type="email" class="form-control text-center"  @bind-Value="_email" placeholder="e-mail" autocomplete/>
			<input type="password" class="form-control mt-3 text-center" placeholder="senha" @bind-value="_password" required/>
			<button class="btn mt-3 form-control" style="background-color: #30e3b3; color: #231058; float: right;" type="submit">Acessar</button>
		</EditForm>
		<a href="#">Recuperar Senha</a>
		@if (string.IsNullOrEmpty(_msg))
		{
			<div id="load" class="@rotacionar"></div>
		}
		else
		{
			<span class="text-center validacaoLoad">@_msg</span>

		}
	</div>

</div>

@code {
	private string? rotacionar { get; set; }
	private string? _msg { get; set; }
	private string? _email { get; set; }
	private string? _password { get; set; }
	private string? _token { get; set; }

	User user = new();


	private async Task Sigin()
	{
		_msg = "";

		if (string.IsNullOrEmpty(_token))
		{
			rotacionar = "rotacionar";
		}

		if (string.IsNullOrEmpty(_email) || string.IsNullOrEmpty(_password))
		{
			return;
		}

		UserService userService = new UserService(httpClient, cookie, NavigationManager);
		try
		{

			user = await userService.Login(new User{Email = _email, Password = _password});

			if (!string.IsNullOrEmpty(user.Token))
			{
				_token = user.Token;
				await cookie.SetValue("app_token", user.Token, 30);
				_msg = "";
				NavigationManager.NavigateTo("dashboard");
			}
			else
			{
				_msg = "credenciais inválidas";
				await cookie.SetValue("app_token", "", 0);
			}

		}
		catch (Exception ex)
		{
			_msg = ex.Message;
		}

	}

}
