@using System.Net.Http.Headers
@inject NavigationManager NavigationManager
@inject ICookie cookie
@inject HttpClient httpClient


<Router AppAssembly="@typeof(App).Assembly">

    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>


@code{
    private string? _token { get; set; }
    private string? _currentUri { get; set; }

    protected override async Task OnInitializedAsync()
    {

        await Intercept();
    }



    private async Task Intercept()
    {
        _token = await cookie.GetValue("app_token");

        _currentUri = NavigationManager.Uri;

        bool check = await CheckToken(_token);

        if (!check)
        {
            NavigationManager.NavigateTo("login");
        }
        else
        {
            NavigationManager.NavigateTo("dashboard");

        }

    }

    private async Task<bool> CheckToken(string token)
    {
        if (string.IsNullOrEmpty(token))
        {
            return false;
        }

        try
        {
            httpClient.DefaultRequestHeaders.Authorization =  new AuthenticationHeaderValue("Bearer", token);
            Me? me = await httpClient.GetFromJsonAsync<Me>("me");

            if (string.IsNullOrEmpty(me.Email))
            {
                await cookie.SetValue("app_token", "", 1);
                return false;
            }

            await cookie.SetValue("userCode", me.Name);
            UserGlobalInfo.Name =  me.Name;
            await cookie.SetValue("erro", "");
            return true;

        }
        catch (Exception ex)
        {
            await cookie.SetValue("erro", ex.Message);
            await cookie.SetValue("app_token", "", 1);
            return false;
        }
    }

}